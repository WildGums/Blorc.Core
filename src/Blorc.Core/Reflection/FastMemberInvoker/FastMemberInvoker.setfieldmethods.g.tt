<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var typeCodes = Enum.GetValues(typeof(TypeCode));
#>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace Catel.Reflection
{
    using System;
    using Catel.Data;

	public partial class FastMemberInvoker<TEntity>
	{
        public bool SetFieldValue<TValue>(object entity, string fieldName, TValue value)
        {
            if (!typeof(TValue).IsValueTypeEx())
            {
                return SetFieldValue((TEntity)entity, fieldName, (object)value);
            }

<# 
foreach (TypeCode typeCode in typeCodes) 
{
    if (typeCode == TypeCode.Empty || typeCode == TypeCode.DBNull || typeCode == TypeCode.Object)
    {
        continue;
    }

#>
            if (typeof(TValue) == typeof(<#= typeCode #>))
            {
                var finalValue = Convert.To<#= typeCode #>(value);
                return SetFieldValue((TEntity)entity, fieldName, finalValue);
            }

<#
                }
#>
            return false;
        }

<# 
foreach (TypeCode typeCode in typeCodes) 
{
	if (typeCode == TypeCode.Empty || typeCode == TypeCode.DBNull)
	{
		continue;
	}

	string typeCodeSetterCacheName = "_" + typeCode.ToString().ToLowerInvariant() + "FieldSettersCache";
#>
        public bool SetFieldValue(TEntity entity, string fieldName, <#= typeCode #> value)
        {
            var setter = Get<#= typeCode #>FieldSetter(fieldName);
            if (setter != null)
            {
                setter(entity, value);
                return true;
            }

            return false;
        }

<# } #>
	}
}