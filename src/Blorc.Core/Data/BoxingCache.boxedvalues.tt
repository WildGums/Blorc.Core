<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var typeCodes = Enum.GetValues(typeof(TypeCode));
#>

//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace Catel.Data
{
	using System;

	public static partial class BoxingCache
	{
<# 
foreach (TypeCode typeCode in typeCodes) 
{
	if (typeCode == TypeCode.Empty || typeCode == TypeCode.DBNull || typeCode == TypeCode.Object)
	{
		continue;
	}
#>
        /// <summary>
        /// Converts the specified <#= typeCode.ToString() #> value into a cached boxed value in case of value type to decrease memory pressure after serialization.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>An object representing the value.</returns>
        public static object GetBoxedValue(<#= typeCode.ToString() #> value)
        {
            return BoxingCache<<#= typeCode.ToString() #>>.Default.GetBoxedValue(value);
        }

<#
}
#>
        /// <summary>
        /// Converts the specified value into a cached boxed value in case of value type to decrease memory pressure after serialization.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>An object representing the value.</returns>
        public static object GetBoxedValue(object value)
        {
            object objectValue = value;

            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType.IsValueType)
                {
					if (false)
					{
						// Dummy code node
					}
<#
foreach (TypeCode typeCode in typeCodes) 
{
	if (typeCode == TypeCode.Empty || typeCode == TypeCode.DBNull || typeCode == TypeCode.Object)
	{
		continue;
	}
#>
                    else if (valueType == typeof(<#= typeCode.ToString() #>))
                    {
                        objectValue = BoxingCache<<#= typeCode.ToString() #>>.Default.GetBoxedValue((<#= typeCode.ToString() #>)value);
                    }
<#
}
#>
                }
            }

            return objectValue;
        }
	}
}